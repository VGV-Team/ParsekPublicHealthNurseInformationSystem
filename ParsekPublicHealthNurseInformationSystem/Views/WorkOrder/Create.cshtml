@using Microsoft.Ajax.Utilities
@using ParsekPublicHealthNurseInformationSystem.ViewModels
@model ParsekPublicHealthNurseInformationSystem.ViewModels.WorkOrderViewModel

@{
    ViewBag.Title = "Nov DN";
}

<h2>Nov delovni nalog</h2>

@using (Html.BeginForm("SubmitWorkOrder","WorkOrder"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />

        @Html.HiddenFor(m => m.SelectedServiceId)


        @Html.Raw(Model.GenerateDropDown(Model.AllPatients, "PatientId", false))
        <div class="form-group">
            @Html.LabelFor(model => model.PatientId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PatientId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(m => m.EnterPatients)
        @if (Model.EnterPatients)
        {
        <div class="form-group">
            @Html.LabelFor(model => model.PatientIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PatientIds, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PatientIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <script>
            var url = '@Url.Action("GetChildPatientsByPatientFullNameWithCode", "REST")';

            var availableTags = [];

            $('#PatientId').ready(function () {
                if ($("#PatientIds").val() !== "") {
                    $.getJSON(url,
                        { FullNameWithCode: $("#PatientId").val() },
                        function (response) {
                            availableTags = [];
                            for (var i = 0; i < response.count; i++) {
                                availableTags.push(response.names[i]);
                            }
                        });
                };

            });
            $('#PatientId').change(function () {
                availableTags = [];
                $("#PatientIds").val("");
                $.getJSON(url,
                    { FullNameWithCode: $("#PatientId").val() },
                    function (response) {
                        for (var i = 0; i < response.count; i++) {
                            availableTags.push(response.names[i]);
                        }
                    });
            });

            function split(val) {
                return val.split(/,\s*/);
            }
            function extractLast(term) {
                return split(term).pop();
            }

            $("#PatientIds")
                // don't navigate away from the field on tab when selecting an item
                .on("keydown", function (event) {

                    if (event.keyCode === $.ui.keyCode.TAB &&
                        $(this).autocomplete("instance").menu.active) {
                        event.preventDefault();
                    }
                })
                .autocomplete({
                    minLength: 0,
                    source: function (request, response) {
                        // delegate back to autocomplete, but extract the last term
                        response($.ui.autocomplete.filter(
                            availableTags, extractLast(request.term)));
                    },
                    focus: function () {
                        // prevent value inserted on focus
                        return false;
                    },
                    select: function (event, ui) {
                        var terms = split(this.value);
                        // remove the current input
                        terms.pop();
                        // add the selected item
                        terms.push(ui.item.value);
                        // add placeholder to get the comma-and-space at the end
                        terms.push("");
                        this.value = terms.join(", ");
                        return false;
                    }
                });
        </script>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.DateTimeOfFirstVisit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateTimeOfFirstVisit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateTimeOfFirstVisit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MandatoryFirstVisit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.MandatoryFirstVisit)
                    @Html.ValidationMessageFor(model => model.MandatoryFirstVisit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MultipleVisits, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.MultipleVisits)
                    @Html.ValidationMessageFor(model => model.MultipleVisits, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div id="timeEntry" hidden>
            <div class="form-group">
                @Html.LabelFor(model => model.NumberOfVisits, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumberOfVisits, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumberOfVisits, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TimeType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(x => x.TimeType, "-- Izberi --", new { @class = "form-control dropdown" })
                    @Html.ValidationMessageFor(model => model.TimeType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id=@WorkOrderViewModel.VisitTimeType.TimeInterval style="display: none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.TimeInterval, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TimeInterval, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TimeInterval, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div id=@WorkOrderViewModel.VisitTimeType.TimeFrame style="display: none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.TimeFrame, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TimeFrame, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TimeFrame, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <script>
                $('#TimeType').on('change',
                    function () {
                        $(@WorkOrderViewModel.VisitTimeType.TimeInterval).hide();
                        $(@WorkOrderViewModel.VisitTimeType.TimeFrame).hide();
                        switch (this.value) {
                            case "1":
                                $(@WorkOrderViewModel.VisitTimeType.TimeFrame).show();
                                break;
                            case "2":
                                $(@WorkOrderViewModel.VisitTimeType.TimeInterval).show();
                                break;
                        }
                    });
            </script>


            <script type="text/javascript">
                if ($("#MultipleVisits").is(":checked")) {
                    $("#timeEntry").show();
                }

                if ($("#TimeType").val() == "1") {
                    $(@WorkOrderViewModel.VisitTimeType.TimeFrame).show();
                }
                if ($("#TimeType").val() == "2") {
                    $(@WorkOrderViewModel.VisitTimeType.TimeInterval).show();
                }

                $(function () {
                    $("#MultipleVisits").click(function () {
                        if ($(this).is(":checked")) {
                            $("#timeEntry").show();
                        } else {
                            $("#timeEntry").hide();
                        }
                    });
                });
            </script>

        </div>





        <div class="form-group">

            @Html.HiddenFor(m => m.EnterMedicine)
            @if (Model.EnterMedicine)
            {
                @Html.Raw(Model.GenerateDropDown(Model.AllMedicines, "MedicineIds"))

                @Html.LabelFor(model => model.MedicineIds, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MedicineIds, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MedicineIds, "", new { @class = "text-danger" })
                </div>
            }

            @Html.HiddenFor(m => m.EnterBloodSample)
            @if (Model.EnterBloodSample)
            {
                @Html.LabelFor(model => model.BloodVialBlueCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BloodVialBlueCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BloodVialBlueCount, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.BloodVialGreenCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BloodVialGreenCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BloodVialGreenCount, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.BloodVialRedCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BloodVialRedCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BloodVialRedCount, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.BloodVialYellowCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BloodVialYellowCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BloodVialYellowCount, "", new { @class = "text-danger" })
                </div>
            }

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Naprej" class="btn btn-default" />
            </div>
        </div>
    </div>
}

        <div>
            @Html.ActionLink("Prekliči", "Index", "Home")
        </div>
