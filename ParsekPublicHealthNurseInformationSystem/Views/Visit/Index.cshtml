@using ParsekPublicHealthNurseInformationSystem.Models
@using ParsekPublicHealthNurseInformationSystem.ViewModels
@model ParsekPublicHealthNurseInformationSystem.ViewModels.VisitViewModel

@{
    ViewBag.Title = "Obisk";
}

<h2>Urejanje podrobnosti obiska</h2>

@if (Model.PatientId == null)
{
    if (Model.MainPatient != null)
    {
        @Html.ActionLink(Model.MainPatient.FullNameWithCode, "EnterData", "Visit",
        new { visitId = Model.VisitId, generalOnly = false, patientId = Model.MainPatient.PatientId },
        new { @class = "btn btn-primary", @style = "color:white" })
    }

    foreach (var childPatient in Model.ChildPatients ?? new List<Patient>())
    {
        @Html.ActionLink(childPatient.FullNameWithCode, "EnterData", "Visit",
        new { visitId = Model.VisitId, generalOnly = false, patientId = childPatient.PatientId },
        new { @class = "btn btn-primary", @style = "color:white" })
    }

    <hr />

    @Html.ActionLink("Nazaj", "Index", "VisitDetails",
        new { visitId = Model.VisitId },
        new { @class = "btn btn-info", @style = "color:white" })
}
else
{
    if (Model.ActivityInputs != null && Model.ActivityInputs.Count > 0)
    {
        using (Html.BeginForm("SaveData", "Visit"))
        {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.VisitId)
        @Html.HiddenFor(m => m.PatientId)

          if (Model.VisitDate.Date == DateTime.Now.AddDays(-1).Date)
          {
            <div>
                <div class="form-group">
                    Dejanski datum obiska:
                    @Html.EditorFor(x => x.VisitDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <hr />
          }
          else if (Model.VisitDate.Date < DateTime.Now.AddDays(-1).Date)
          {
            <div>
                <div class="form-group">
                    Dejanski datum obiska:
                    <span title="Čas za vnos podatkov je pretekel.">
                        @Html.EditorFor(x => x.VisitDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </span>
                </div>
            </div>
            <hr />
          }

          int count = 0;

          for (int i = 0; i < Model.ActivityInputs.Count; i++)
          {
            <div>
                <label class="panel-title">@Model.ActivityInputs[i].ActivityTitle</label>


                @for (int j = 0; j < Model.ActivityInputs[i].ActivityInputDatas.Count; j++)
                {
                    <div class="form-group">


                        @Html.HiddenFor(x => x.ActivityInputIds[count])




                        @if (Model.ActivityInputs[i].ActivityInputDatas[j].Required)
                        {
                            @Html.Label(Model.ActivityInputIds[count].ToString(), Model.ActivityInputs[i].ActivityInputDatas[j].ActivityInputTitle + " *", htmlAttributes: new { @class = "control-label col-md-2" })
                        }
                        else
                        {
                            @Html.Label(Model.ActivityInputIds[count].ToString(), Model.ActivityInputs[i].ActivityInputDatas[j].ActivityInputTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                        }


                        @FillData(i, j, count)

                    </div>

                    //@Html.TextBoxFor(x => x.ActivityInputIds[count])
                    //<input type="text" id="ActivityInputValues_@count" value="text" />
                    //<input type="hidden" id="ActivityInputIds_@count" value="@Model.ActivityInputs[i].ActivityInputDatas[j].ActivityInputId" />



                    // ActivityInputId[count] = [i][j]
                    // input [count]

                    count++;
                }
                <hr />

            </div>
          }

          if (Model.VisitDate.Date < DateTime.Now.AddDays(-1).Date)
          {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <span title="Čas za vnos podatkov je pretekel.">
                        <input type="button" value="Shrani" class="btn btn-default disabled" />
                    </span>
                </div>
            </div>
          }
          else
          {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Shrani" class="btn btn-default" />
                </div>
            </div>
          }
      }
  }
    <hr />

    @Html.ActionLink("Nazaj", "Index", "Visit",
        new { visitId = Model.VisitId },
        new { @class = "btn btn-info", @style = "color:white" })
}


<!-- i: activityinputs, j: activityinputdatas, count: activityinputvalues -->
@helper FillData(int i, int j, int count)
{

     
        ParsekPublicHealthNurseInformationSystem.ViewModels.VisitViewModel.Input.InputData AID = Model.ActivityInputs[i].ActivityInputDatas[j];
    

        if (Model.VisitDate.Date < DateTime.Now.AddDays(-1).Date)
        {
        <span title="Čas za vnos podatkov je pretekel.">
           

            @switch (AID.InputType)
            {
                case ActivityInput.InputTypeEnum.Date:
                    @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @disabled = "disabled", @type="date" })
                    break;
                case ActivityInput.InputTypeEnum.Dropdown:
                    @Html.DropDownListFor(x => x.ActivityInputValues[count], new SelectList(AID.PossibleValues), Model.ActivityInputValues[count], new { @class = "form-control", @disabled = "disabled", @type = "date" })
                    break;
                case ActivityInput.InputTypeEnum.Number:
                    @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @disabled = "disabled", @type = "number" })
                    break;
                default:
                    @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @disabled = "disabled" })
                    break;
            }

        </span>
    }
    else if (Model.ActivityInputs[i].ActivityInputDatas[j].ReadOnly)
    {

        switch (AID.InputType)
        {
            case ActivityInput.InputTypeEnum.Date:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @readonly = "true", @type = "date" })
                break;
            case ActivityInput.InputTypeEnum.Dropdown:
                @Html.DropDownListFor(x => x.ActivityInputValues[count], new SelectList(AID.PossibleValues), Model.ActivityInputValues[count], new { @class = "form-control", @readonly = "true", @type = "date" })
                break;
            case ActivityInput.InputTypeEnum.Number:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @readonly = "true", @type = "number" })
                break;
            default:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @readonly = "true" })
                break;
        }
        <p style="color: mediumpurple;">Vrednost prenešena iz prvega obiska</p>
    }
    else if (Model.ActivityInputs[i].ActivityInputDatas[j].Required)
    {

        switch (AID.InputType)
        {
            case ActivityInput.InputTypeEnum.Date:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @required = "true", @type = "date" })
            break;
        case ActivityInput.InputTypeEnum.Dropdown:
            if (Model.ActivityInputValues[count] == "")
            {
                    @Html.DropDownListFor(x => x.ActivityInputValues[count], new SelectList(AID.PossibleValues, ""), new { @class = "form-control", @required = "true", @type = "date" }) 
                }
                else
                {
                    @Html.DropDownListFor(x => x.ActivityInputValues[count], new SelectList(AID.PossibleValues, Model.ActivityInputValues[count]), new { @class = "form-control", @required = "true", @type = "date" })
                }

            break;
        case ActivityInput.InputTypeEnum.Number:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @required = "true", @type = "number" })
                break;
            default:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @required = "true" })
                break;
        }

    }
    else
    {

        switch (AID.InputType)
        {
            case ActivityInput.InputTypeEnum.Date:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @type = "date" })
                break;
            case ActivityInput.InputTypeEnum.Dropdown:
                @Html.DropDownListFor(x => x.ActivityInputValues[count], new SelectList(AID.PossibleValues), Model.ActivityInputValues[count], new { @class = "form-control", @type = "date" })
                break;
            case ActivityInput.InputTypeEnum.Number:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control", @type = "number" })
                break;
            default:
                @Html.TextBoxFor(x => x.ActivityInputValues[count], new { @class = "form-control" })
                break;
        }
    }


}